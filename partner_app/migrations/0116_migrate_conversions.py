# Generated by Django 5.1.6 on 2025-10-07 07:52

from django.db import migrations


def migrate_conversions(apps,schema_editor):
    old_conv = apps.get_model('partner_app','Conversion')
    new_conv = apps.get_model('tracking','Conversion')

    project = apps.get_model('advertisers','Project')
    advertiser = apps.get_model('advertisers','AdvertiserProfile')
    partner = apps.get_model('partners','PartnerProfile')
    partner_link = apps.get_model('partners','PartnerLink')
    platform = apps.get_model('partners','Platform')
    partnership = apps.get_model('partnerships','ProjectPartner')


    old_conversions = old_conv.objects.all()

    new_conversions = []
    for conversion in old_conversions:
        if conversion.project: new_project = project.objects.get(id=conversion.project.id)
        else: new_project = None
        
        if conversion.advertiser: new_advertiser = advertiser.objects.get(id=conversion.advertiser.id)
        else: new_advertiser = None
        
        if conversion.partner: new_partner = partner.objects.get(id=conversion.partner.id)
        else: new_partner = None

        if conversion.partner_link: new_partner_link = partner_link.objects.get(id=conversion.partner_link.id)
        else: new_partner_link = None
        
        if conversion.platform: new_platform = platform.objects.get(id=conversion.platform.id)
        else: new_platform = None

        if conversion.partnership: new_partnership = partnership.objects.get(id=conversion.partnership.id)
        else: new_partnership = None

        new_conversion = new_conv(
            id=conversion.id,

            project=new_project,
            advertiser=new_advertiser,
            partner=new_partner,
            partner_link=new_partner_link,
            platform=new_platform,
            partnership=new_partnership,

            amount = conversion.amount,
            created_at = conversion.created_at,
            details = conversion.details,
            user_agent = conversion.user_agent,
            ip_address = conversion.ip_address
        )

        new_conversions.append(new_conversion)


    new_conv.objects.bulk_create(new_conversions,batch_size=1000)
    schema_editor.execute("""
        SELECT setval('tracking_conversion_id_seq',
        (SELECT COALESCE(MAX(id), 1) FROM tracking_conversion), true); 
    """)



def reverse_migrate_conversions(apps,schema_editor):
    conversion = apps.get_model('tracking','Conversion')
    conversion.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('partner_app', '0115_migrate_managers'),
        ('tracking','0001_initial'),
    ]

    operations = [
        migrations.RunPython(migrate_conversions,reverse_code=reverse_migrate_conversions)
    ]
