# Generated by Django 5.1.6 on 2025-10-07 08:30

from django.db import migrations


def migrate_click_events(apps,schema_editor):
    old_click = apps.get_model('partner_app','ClickEvent')
    new_click = apps.get_model('tracking','ClickEvent')

    project = apps.get_model('advertisers','Project')
    partner = apps.get_model('partners','PartnerProfile')
    advertiser = apps.get_model('advertisers','AdvertiserProfile')
    platform = apps.get_model('partners','Platform')
    partner_link = apps.get_model('partners','PartnerLink')
    partnership = apps.get_model('partnerships','ProjectPartner')


    old_clicks = old_click.objects.all()

    new_conversions = []
    for click in old_clicks:
        if click.project: new_project = project.objects.get(id=click.project.id)
        else: new_project = None
        
        if click.advertiser: new_advertiser = advertiser.objects.get(id=click.advertiser.id)
        else: new_advertiser = None
        
        if click.partner: new_partner = partner.objects.get(id=click.partner.id)
        else: new_partner = None

        if click.partner_link: new_partner_link = partner_link.objects.get(id=click.partner_link.id)
        else: new_partner_link = None
        
        if click.platform: new_platform = platform.objects.get(id=click.platform.id)
        else: new_platform = None

        if click.partnership: new_partnership = partnership.objects.get(id=click.partnership.id)
        else: new_partnership = None

        new_conversion = new_click(
            id=click.id,

            project=new_project,
            partner=new_partner,
            advertiser=new_advertiser,
            platform=new_platform,
            partner_link=new_partner_link,
            partnership=new_partnership,

            referrer=click.referrer,
            user_agent=click.user_agent,
            ip_address=click.ip_address,
            created_at=click.created_at

        )

        new_conversions.append(new_conversion)


    new_click.objects.bulk_create(new_conversions,batch_size=1000)
    schema_editor.execute("""
        SELECT setval('tracking_clickevent_id_seq',
        (SELECT COALESCE(MAX(id), 1) FROM tracking_clickevent), true); 
    """)


def reverse_clicks(apps,schema_editor):
    click = apps.get_model('tracking','ClickEvent')
    click.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('partner_app', '0116_migrate_conversions'),
        ('tracking','0002_clickevent'),
    ]

    operations = [
    ]
